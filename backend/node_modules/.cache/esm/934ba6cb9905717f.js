let mongoose,compareSync,hashSync;_990‍.x([["default",()=>_990‍.o]]);_990‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_990‍.w("bcryptjs",[["compareSync",["compareSync"],function(v){compareSync=v}],["hashSync",["hashSync"],function(v){hashSync=v}]]);

const UserSchema = new mongoose.Schema({
  username: {
    type: String,
    validate: {
      validator: username => User.doesNotExist({ username }),
      message: "Username already exists"
    }
  },
  email: {
    type: String,
    validate: {
      validator: email => User.doesNotExist({ email }),
      message: "Email already exists"
    }
  },
  password: {
    type: String,
    required: true
  }
}, { timestamps: true });

UserSchema.pre('save', function () {
    if (this.isModified('password')) {
      this.password = hashSync(this.password, 10);
    }
  });
  UserSchema.statics.doesNotExist = async function (field) {
    return await this.where(field).countDocuments() === 0;
  };
  UserSchema.methods.comparePasswords = function (password) {
    return compareSync(password, this.password);
  };
  const User = mongoose.model('User', UserSchema);
  _990‍.d(User);